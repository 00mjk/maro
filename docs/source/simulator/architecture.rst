Architecture
===============
Our simulator is a event-driven state machine composed of 4 modules: environment core, graph (data module),
event buffer and business engine.

.. image:: ../images/simulator_overview.png

Mechanism
---------

All changes in the environment occur through events, which are stored in an event buffer driven by event buffer.
Those events related to business logic are generated by business engine.
With user-defined callback functions, specified business scenario is produced in the environment.
The graph module stores the states of the whole environment and speed up by C-based data operations.
The core module is the only exposed interface of environment, it integrates all modules above and docks with other parts of MARO.

.. image:: ../images/simulator_cooperation.png

Usages
------
The core module is the administrator and supervisor of the whole environment.
Therefore, we actually operate on the core module when we call the environment from outside.

.. code-block:: python

    env: Env = Env(scenario, topology, max_tick)
    # Instantiate a new env object based on the given scenario, topology and max tick number of each episode.
    env.reset()
    # Reset all state of the environment. Usually called at the beginning of each episode.
    env.step(action)
    # Let the environment run a tick using given action. Note: tick number is not needed here.
    pending_events: list = env.get_pending_events()
    # Fetch pending events in the event buffer.
    finished_events: list = env.get_finished_events()
    # Fetch all finished events since the beginning of current episode.

